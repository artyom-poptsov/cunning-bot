#!@GUILE@ \
--debug -e main
# aside from this initial boilerplate, this is actually -*- scheme -*- code
!#

;;; tappet.scm -- A reliable IRC log pusher

;; Copyright (C) 2014 Artyom V. Poptsov

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Use this tappet to push IRC logs into the web.


;;; Code:

(use-modules (ice-9 getopt-long)
             (ice-9 ftw)
             (ice-9 match)
             (ice-9 regex)
             (web   uri)
             (sxml  simple)
             (rnrs  sorting)
             (dsv))

(define %cadrobot-url "https://github.com/artyom-poptsov/cunning-bot/tree/cadrobot")
(define %tappet-url   "https://github.com/artyom-poptsov/cunning-bot/blob/cadrobot/tappet.in")

(define %iso8601 "%Y-%m-%dT%H:%M:%S%z")

(define *debug?* #f)

(define (debug fmt . message)
  (and *debug?*
       (format #t fmt message)))

;; Taken from GNU Guile manual
(define remove-stat
  ;; Remove the `stat' object the `file-system-tree' provides
  ;; for each file in the tree.
  (match-lambda
   ((name stat)              ; flat file
    name)
   ((name stat children ...) ; directory
    (list name (map remove-stat children)))))

(define (get-channels root-directory)
  (cadr (remove-stat (file-system-tree root-directory))))

(define (mkdir/try dirname)
  "Make a directory DIRNAME only if it does not exist."
  (or (file-exists? dirname)
      (mkdir dirname)))

(define (name n)
  (if (pair? n) (car n) n))


;;; HTML helpers

(define (make-html-head title)
  "Make HTML <head> with the given TITLE."
  `(head (meta (@ (http-equiv "Content-Language")
                  (content    "ru")))
         (meta (@ (http-equiv "Content-Type")
                  (content    "text/html; charset=utf-8")))
         (style "tr:hover { background: #eee; }")
         (title ,title)))

(define (make-html-footer)
  "Make a page footer."
  `(center
    (p "Collected by " (a (@ (href ,%cadrobot-url)) "cadrobot")
       ", converted to HTML using " (a (@ (href ,%tappet-url)) "tappet")
       " at " ,(strftime %iso8601 (localtime (current-time))))))

(define (write-html-page! title body port)
  "Write HTML page with the given TITLE and BODY to the PORT."
  (sxml->xml `(html ,(make-html-head title)
                    (body ,@body (hr) ,(make-html-footer))) port))


;;;

(define (write-index! elem-list directory)
  "Write index file based on ELEM-LIST which is a list of pairs in the
format `(link-name destination)' to the DIRECTORY."
  (debug "        write-index!: elem-list: ~a~%" elem-list)
  (let* ((links (map (lambda (e) `(li (a (@ (href ,(cadr e))) ,(car e))))
                     elem-list))
         (p     (open-output-file (string-append directory "/index.html"))))
    (write-html-page! "index" `((ul ,links)) p)))


;;; Exporters

(define (timestamp->link timestamp)
  (let ((hms (strftime "%T" (localtime timestamp))))
    `(a (@ (name  ,timestamp)
           (title ,(strftime %iso8601 (localtime timestamp)))
           (href  ,(string-append "#" (number->string timestamp))))
        ,hms)))

(define (export-log! log-file source destination)
  (debug "        export-log!: log-file: ~a~%" log-file)
  (let* ((p   (open-input-file (string-append source "/" log-file)))
         (log (dsv-read p)))

    ;; XXX
    (let* ((rec->tr (lambda (rec)
                      `(tr (td ,(timestamp->link
                                 (string->number (list-ref rec 0)))) ;timestamp
                           (td ,(list-ref rec 1)) ;sender
                           (td ,(list-ref rec 2)) ;command
                           (td ,(string-join (cdddr rec) ":"))))) ;message
           (table-header `(tr (@ (style "background-color: lightgray"))
                              (th "Timestamp")
                              (th "Sender")
                              (th "Type")
                              (th "Message")))
           (log     `(table (@ (cellpadding 2)
                               (width       "100%"))
                            ,table-header ,(map rec->tr log)))
           (html-file (string-append (car (string-split log-file #\.)) ".html"))
           (dest    (string-append destination "/" html-file))
           (out     (open-output-file dest)))

      (write-html-page! log-file (list log) out)
      (list log-file html-file))))

(define (export-month! month-subtree source destination)
  "Export MONTH-SUBTREE to MONTH-DIR."
  (debug "      export-month!: month-subtree: ~a~%" month-subtree)
  (debug "      export-month!: source:        ~a~%" source)
  (debug "      export-month!: destination:   ~a~%" destination)
  (mkdir/try destination)
  (map (lambda (f) (export-log! f source destination))
       (list-sort (lambda (e1 e2) (string>? e1 e2)) (cadr month-subtree))))

(define (export-year! year-subtree source destination)
  "Export YEAR-SUBTREE to DESTINATION directory."
  (debug "    export-year!: year-subtree: ~a~%" year-subtree)
  (debug "    export-year!: source:       ~a~%" source)
  (debug "    export-year!: destination:  ~a~%" destination)
  (mkdir/try destination)
  (map (lambda (month)
         (let* ((source      (string-append source      "/" (name month)))
                (destination (string-append destination "/" (name month)))
                (elem-list   (export-month! month source destination)))
           (write-index! elem-list destination)
           (list (name month) (name month))))
       (list-sort (lambda (e1 e2) (string>? (car e1) (car e2)))
                  (cadr year-subtree))))

(define (export-channel! channel-subtree source destination)
  "Export CHANNEL-SUBTREE to DESTINATION directory."
  (debug "  export-channel!: channel-subtree: ~a~%" channel-subtree)
  (debug "  export-channel!: source:          ~a~%" source)
  (debug "  export-channel!: destination:     ~a~%" destination)
  (mkdir/try destination)
  (map (lambda (year)
         (let* ((source      (string-append source      "/" (name year)))
                (destination (string-append destination "/" (name year)))
                (elem-list   (export-year! year source destination)))
           (write-index! elem-list destination)
           (list (name year) (name year))))
       (cadr channel-subtree)))

(define (export-channels! channels source destination)

  (define (remove-#s channel-name)
    (regexp-substitute/global #f "#*" channel-name 'pre "" 'post))

  (debug "  export-channels!: channels:    ~a~%" channels)
  (debug "  export-channels!: source:      ~a~%" source)
  (debug "  export-channels!: destination: ~a~%" destination)

  (mkdir/try destination)

  (map (lambda (channel)
         (let* ((orig-name   (name channel))
                (dest-name   (remove-#s orig-name))
                (source      (string-append source      "/" orig-name))
                (destination (string-append destination "/" dest-name))
                (elem-list   (export-channel! channel source destination)))
           (write-index! elem-list destination)
           (list orig-name dest-name)))
       channels))

;;;

(define (print-help-and-exit)
  "Print the help message and exit."
  (display "\
Usage: tappet [options]

Options:
  --help, -h             Print this message and exit.
  --root-directory, -r   Set path to the directory in which logs are stored.
  --output-directory, -o Set path to the directory to store HTML files.
  --debug                Enable debug mode.
")
  (exit 0))

(define %option-spec
  '((help             (single-char #\h) (value #f))
    (root-directory   (single-char #\r) (value #t))
    (output-directory (single-char #\o) (value #t))
    (debug                              (value #f))))

(define (main args)
  "Entry point of the program."

  (let* ((options        (getopt-long args %option-spec))
         (help-wanted?     (option-ref options 'help  #f))
         (root-directory   (option-ref options 'root-directory #f))
         (output-directory (option-ref options 'output-directory #f))
         (debug-wanted?    (option-ref options 'debug #f)))

    (and help-wanted?
         (print-help-and-exit))

    (and debug-wanted?
         (set! *debug?* #t))

    (or root-directory
        (error "You need to specify the root directory"))

    (or output-directory
        (error "You need to specify the output directory"))

    (let* ((channels  (get-channels root-directory))
           (elem-list (export-channels! channels
                                        root-directory output-directory)))
      (write-index! elem-list output-directory))))

;;; tappet.scm ends here
